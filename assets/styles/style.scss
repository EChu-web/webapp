@import "constants.scss";

// custom fonts slow down page loading

@font-face
{
	font-family : 'Scada';
	font-style  : normal;
	font-weight : 400;
	src         : url('../fonts/Scada/Scada-Regular.ttf') format('truetype');
}

@font-face
{
	font-family : 'Scada';
	font-style  : italic;
	font-weight : 400;
	src         : url('../fonts/Scada/Scada-Italic.ttf') format('truetype');
}

// @font-face
// {
// 	font-family : 'Scada';
// 	font-style  : normal;
// 	font-weight : 700;
// 	src         : url('../fonts/Scada/Scada-Bold.ttf') format('truetype');
// }

// @font-face
// {
// 	font-family : 'Scada';
// 	font-style  : italic;
// 	font-weight : 700;
// 	src         : url('../fonts/Scada/Scada-BoldItalic.ttf') format('truetype');
// }

html, body, #react_markup, .layout
{
	height: 100%;
}

// ...
// {
// 	min-height: 100%;
// 	// http://stackoverflow.com/questions/8468066/child-inside-parent-with-min-height-100-not-inheriting-height
// 	height: 1px;
// }

body
{
	margin: 0;
	overflow-y: scroll;
}

body, button, input[type="text"], textarea, select
{
	// font-family : 'PT Sans';
	font-family : Scada, Arial, Helvetica;
}

input[type="text"]
{
	display: block;
	width: 18em;
	// width: 100%;

	margin: 0;
	padding: 0.4em;

	appearance: none;

	box-sizing: border-box;

	border: none;
	border-bottom: solid 2px #c9c9c9;
	transition: border 0.1s;

	&:focus
	{
		outline: none;

		border-bottom: solid 2px $active-color;
	}
}

// input[type="checkbox"]
// {
// 	width: 0.9em;
// 	height: 0.9em;
//
// 	margin-right: 0.3em;
// 	margin-bottom: 0.15em;
//
// 	vertical-align: bottom;
// }

.page
{
	display        : flex;
	flex-direction : column;

	transition: none;

	min-height: 100%;
	// for IE11
	height: 1px;
}

footer
{
	// can be removed later
	position: relative;

	// height: 1px;
	background: #efefef;
	color: rgb(102, 102, 102);

	padding-top    : 1.3em;
	padding-bottom : 1.2em;

	padding-left  : 1em;
	padding-right : 1em;

	font-size: 0.8em;

	> div
	{
		text-align: center;
	}
}

img
{
	max-width: 100%;
    height: auto;
}

a
{
	text-decoration: none;
}

a:active
{
	color: $active-darker-color;
}

button
{
	background : none;
	border     : none;
	outline    : none;
	padding    : 0;

	// font-weight : bold;
	// color       : $active-color;
	color       : $button-color;

	transition: color 30ms ease-out;

	&:active
	{
		// color: $active-lighter-color;
		color: $active-color;
	}
}

button.secondary
{
	color : $secondary-button-color;

	&:active
	{
		// color: $active-lighter-color;
		color: $secondary-button-active-color;
	}
}

nav
{
	padding-top:    0.4em;
	padding-bottom: 0.5em;
}

h1, h2
{
	font-weight : normal;
}

a
{
	color: $active-darker-color;
}

@-moz-keyframes spinner
{
	0%
	{
		-moz-transform : rotate(0deg);
		transform      : rotate(0deg);
	}
	100%
	{
		-moz-transform : rotate(360deg);
		transform      : rotate(360deg);
	}
}

@-webkit-keyframes spinner
{
	0%
	{
		-webkit-transform : rotate(0deg);
		transform         : rotate(0deg);
	}
	100%
	{
		-webkit-transform : rotate(360deg);
		transform         : rotate(360deg);
	}
}

@keyframes spinner
{
	0%
	{
		-moz-transform    : rotate(0deg);
		-ms-transform     : rotate(0deg);
		-webkit-transform : rotate(0deg);
		transform         : rotate(0deg);
	}
	100%
	{
		-moz-transform    : rotate(360deg);
		-ms-transform     : rotate(360deg);
		-webkit-transform : rotate(360deg);
		transform         : rotate(360deg);
	}
}

/* :not(:required) hides this rule from IE9 and below */
.spinner:not(:required)
{
	display: inline-block;
	box-sizing: border-box;
	position: relative;
	
	text-indent: -9999px;
	overflow: hidden;

	width: 0.6em;
	height: 0.6em;

	border: 0.05em solid black;
	border-right-color: transparent;
	border-radius: 0.3em;

	// -moz-animation    : spinner 1250ms infinite linear;
	// -webkit-animation : spinner 1250ms infinite linear;
	animation: spinner 1250ms infinite linear;
}

.dropdown
{
	color: black;
}

.dropdown-item-list
{
	transition-property        : max-height, border-color, box-shadow, opacity;
	transition-duration        : 0ms; // don't animate short lists
	transition-timing-function : ease-out;

	border-width : 1px;
	border-style : solid;
	border-color : transparent;

	opacity: 0.85;

	// prevent white background showing through the transparent border
	// http://stackoverflow.com/questions/7473200/transparent-border-expands-background-color-image
	background-clip: padding-box;
	// for Safari
	-webkit-background-clip: padding-box;

    overflow-y: auto;
}

.dropdown-item-list-expanded
{
	box-shadow : 0 3px 20px rgba(0, 0, 0, 0.05);

	border-color : #e7e7e7;

	opacity: 1;
}

.dropdown-item
{
	padding-left  : $dropdown-item-horizontal-padding;
	padding-right : $dropdown-item-horizontal-padding;

	padding-top    : $dropdown-item-vertical-padding;
	padding-bottom : $dropdown-item-vertical-padding;
}

.dropdown-item-list
{
	> li:first-child
	{
		padding-top    : 2 * $dropdown-item-vertical-padding;
	}

	> li:last-child
	{
		padding-bottom : 2 * $dropdown-item-vertical-padding;
	}
}

.dropdown-item-selected
{
	padding-left: $dropdown-item-horizontal-padding;
}

.dropdown-item, .dropdown-item-selected
{
	color: inherit;
	font-weight: normal;

	&:active
	{
		color: $active-darker-color;
	}
}

.dropdown-arrow
{
	opacity: 0.3;
}

.content
{
	flex-grow: 1;
	// flex: 1;

	margin-top    : 2em;
	margin-bottom : 2.5em;

	padding-left  : 1.8em;
	padding-right : 1.8em;
}

.menu
{
	// flex-grow: 1;
	// flex-shrink: 1;
	
	margin-left    : 0.5em;
	margin-bottom : -0.01em !important;
    vertical-align: bottom;

	li:not(:last-child)
	{
		margin-right: 1em;
	}
}

.menu-item
{
	margin-left    : 0.4em;
	margin-right   : 0.4em;

	padding-bottom : 0em;

	border-bottom-width : 0.12em;
	border-bottom-color : transparent;
	border-bottom-style : solid;
}

.menu-item-selected
{
	color : $active-lighter-color;
	// border-bottom-color : $active-color;
}

.menu-collapsible
{
	a
	{
		color: inherit;
	}

	li
	{
		margin-right: 0 !important;
	}
}

.logo
{
	// flex-grow: 1;
	// flex-shrink: 1;

	display : inline-block;
	vertical-align : bottom;
}

header
{
	// display: flex;

	padding-top    : 0.5em;
	padding-bottom : 0.5em;

	padding-left  : 1.0em;
	padding-right : 1.0em;

	background   : $header-background;
	color        : $header-background-text-color;
	border-color : $header-background-text-color;

	button, a, .dropdown-item-selected
	{
		color: $header-background-text-color;

		&:active
		{
			color: $header-background-text-color-active;
		}
	}

	.dropdown-arrow
	{
		color: $header-background-text-color;
		opacity: 0.8;
	}
}

// https://css-tricks.com/three-line-menu-navicon/

.menu-button
{
	display: none;
	position: absolute;

	&:active
	{
		.menu-icon:before
		{
			// border-color: $active-lighter-color;
			border-color: $header-background-text-color-active;
		}
	}
}

.language
{
	position: absolute;
	top: 1.1em;
	right: 0;

	margin-top: 0.1em;
	margin-right: 1.5em;

	.dropdown-item-selected
	{
		text-align: right !important;
	}

	.dropdown-item-icon > img
	{
		width: 1.2em;
	}
}

.authentication
{
	position: absolute;
	top: 0.7em;
	right: 0.8em;

	button
	{
		font-weight: normal;
	}
}

table
{
	border-spacing  : 0;
	border-collapse : collapse;
}

th, td
{
	padding     : 8px;
	line-height : 1.42857143;
    border-top  : 1px solid #ddd;
}

th
{
	vertical-align : bottom;
	border-bottom  : 2px solid #ddd;
	border-top     : 0;
	text-align     : left;

    color       : #7f7f7f;
    font-weight : normal;
}

// http://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/

.checkbox svg path
{
	stroke: $active-color !important;
	stroke-width: 0.6em !important;
}

.checkbox input:active + .checkbox_border
{
	// border-color: $active-color !important;
	border-color: #bfbfbf !important;
}

.checkbox_label:active
{
	color: $active-darker-color !important;
}

// https://github.com/sass/libsass/issues/1766

@media all and (min-width: $medium-screen-width + 1pt)                                                   { @import "l-xl.scss"; }
@media all and (min-width: $small-screen-width + 1pt)        and (max-width: $medium-screen-width)       { @import "m-l.scss";  }
@media all and (min-width: $extra-small-screen-width + 1pt)  and (max-width: $medium-screen-width)       { @import "s-m.scss";  }
@media all                                                   and (max-width: $medium-screen-width)       { @import "xs-m.scss"; }
@media all                                                   and (max-width: $small-screen-width)        { @import "xs-s.scss"; }

@media all and (min-width: $large-screen-width + 1pt)                                                    { @import "xl.scss"; }
@media all and (min-width: $medium-screen-width + 1pt)       and (max-width: $large-screen-width)        { @import "l.scss";  }
@media all and (min-width: $small-screen-width + 1pt)        and (max-width: $medium-screen-width)       { @import "m.scss";  }
@media all and (min-width: $extra-small-screen-width + 1pt)  and (max-width: $small-screen-width)        { @import "s.scss";  }
@media all                                                   and (max-width: $extra-small-screen-width)  { @import "xs.scss"; }

// @import "xl.scss"     all and (min-width: 1921px);
// @import "l-xl.scss"   all and (min-width: 1201px);
// @import "l.scss"      all and (min-width: 1201px) and (max-width: 1920px);
// @import "m-l.scss"    all and (min-width: 641px)  and (max-width: 1920px);
// @import "m.scss"      all and (min-width: 641px)  and (max-width: 1200px);
// @import "s-m.scss"    all and (min-width: 281px)  and (max-width: 1200px);
// @import "s.scss"      all and (min-width: 281px)  and (max-width: 640px);
// @import "xs-m.scss"   all and                         (max-width: 1200px);
// @import "xs-s.scss"   all and                         (max-width: 640px);
// @import "xs.scss"     all and                         (max-width: 280px);
