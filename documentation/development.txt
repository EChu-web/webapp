Для разработки проекта нужны:

Node.js, Gulp, CoffeeScript, PostgreSQL

Сам я разрабатываю на машине с Windows.

Если вы сидите на Linux'е, то запустите скрипт automation/install.sh

=== Сборка ===

Запуск Gulp'а - команда gulp

Для разработки я пользуюсь технологией "RAM disk", которая позволяет создать виртуальный диск
из области оперативной памяти, и поэтому в неё можно писать во-первых быстро, а во вторых - 
не тратя ресурс SSD.

На Windows программа для создания RAM disk'а называется SoftPerfect RAM Disk (бесплатная).
По размеру - пока, скажем, мегабайтов на 300-400 сойдёт.

В файле development configuration.json прописывается путь к папке с собранным проектом.
Если не хотите пользоваться RAM disk'ом, то можете написать там просто './build'.

Каждый раз при запуске gulp'а он копирует также node_modules в папку сборки.
Если вы установили какой-то новый модуль, то

Если на некотором этапе заглючит сборка проекта, то можно попробовать сделать gulp clean, 
чтобы потом "начать с чистого листа".

=== Языки ===

И на сервере, и на клиенте можно использовать как coffeescript, так и яваскрипт.
По идее, если нужна будет ещё какая-то экзотика, типа PureScript'а, то можно и её подключить.

Взаимодействие с базой данных построено на ORM библиотеке Bookshelf.
http://bookshelfjs.org/

Стили - Sass.
http://sass-lang.com/guide

Сам я пишу на синтаксисе Sass, который не заставляет разработчика ставить {} и ;

Sass включает в себя также и Scss, который совместим с обычным Css.
То есть, если вам нужно вставить какой-нибудь кусок стилей из интернета, вы можете 
скопировать его и вставить в какой-нибудь файл *.scss, и он по идее должен заработать.

Оптимизация вёрстки:
http://habrahabr.ru/company/yandex/blog/239169/

Для улучшения производительности (на мобильных устройствах) всегда нужно избегать вложенности стилевых селекторов.
Примеры: table tr td.title, .menu_item.small.
Везде, где можно - заменяйте такие сложные селекторы одиночными.
Иногда это невозможно (:active, parent:hover child) - тогда можно их использовать.

Для оптимизации рендеринга (чтобы не вызывать каждый раз перестроение древа рендеринга DOM)
следует по возможности избегать display: none -> block, и там, где это возможно, выносить
такой участок в отдельный слой (скажем, с помощью null transform hack), чтобы вместо 
перерендеринга на процессоре вызывался перекомпозитинг на графическом ускорителе.

Также, если в некоем "активном" состоянии у элемента добавляется свойство, выносящее его 
в отдельный слой (opacity, transform), то следует выносить его в отдельный слой уже 
в "изначальном" состоянии.

Разметка - только "адаптивный" Html ("адаптивная вёрстка", для работы на мобильных устройствах).

Используйте как можно меньше тегов (для улучшения производительности на мобильных устройствах).

Шаблонизатор - Dust.js
https://github.com/linkedin/dustjs/wiki/Dust-Tutorial

Это один из наиболее быстрых шаблонизаторов, при этом с более-менее вменяемым синтаксисом.
Оригинальный проект был заморожен автором в 2011-ом году, но далее проект был fork'нут
компанией LinkedIn, и дорабатывается по сей день.